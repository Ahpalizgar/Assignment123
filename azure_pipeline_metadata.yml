trigger:
  branches:
    include:
    - main
    - test
    - features/*
  tags:
    include:
    - "*"    
  paths:
    include:
    - platform/*

pool:
  name: ahpazuremanageddevops

variables:
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    - name: ENVIRONMENT
      value: PRD
  - ${{ elseif startsWith(variables['Build.SourceBranch'], 'refs/heads/test') }}:
    - name: ENVIRONMENT
      value: TST
  - ${{ else }}:
    - name: ENVIRONMENT
      value: DEV

  - group: AbaKeyVault-${{ variables.ENVIRONMENT }}


parameters:
- name: env
  default: $(env)
- name: serviceConnection
  default: $(serviceConnection)
- name: dataPlatformPrincipalId
  default: $(apdap-devops-sc-dev-client-id)
- name: dataPlatformPrincipalKey
  default: $(apdap-devops-sc-dev-client-secret)
- name: dataPlatformSubscriptionId
  default: $(dataPlatformSubscriptionId)
- name: dataPlatformSubscriptionName
  default: $(dataPlatformSubscriptionName)

stages:
- stage: adssa
  jobs:
  - job: terraform_plan
    steps:
    - script: |
        # Install Azure CLI
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
        # Install Terraform
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt-get update && sudo apt-get install terraform
      displayName: 'Install Azure CLI and Terraform'

    - script: |
        echo apdap-devops-sc-dev-client-id : $(apdap-devops-sc-dev-client-id)
        echo apdap-devops-sc-dev-client-secret : $(apdap-devops-sc-dev-client-secret)
        echo dataPlatformSubscriptionId : $(dataPlatformSubscriptionId)
        echo dataPlatformSubscriptionName : $(dataPlatformSubscriptionName)
        echo keyVaultName : $(keyVaultName) 
      displayName: 'Set Terraform values'


    # Step 3: Use AzureCLI@2
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo " ==== set Terraform values for using azure resources ====="
          export ARM_CLIENT_ID="${{ parameters.dataPlatformPrincipalId }}"
          export ARM_CLIENT_SECRET="${{ parameters.dataPlatformPrincipalKey }}"
          export ARM_TENANT_ID="0d739c66-dcf8-4b06-87ab-9052bd918a5f"
          export ARM_SUBSCRIPTION_ID="${{ parameters.dataPlatformSubscriptionId }}"

          # Terraform steps
          az account set -s ${{ parameters.dataPlatformSubscriptionName }}
          cd $(System.DefaultWorkingDirectory)/terraform
          terraform init -backend-config="$(System.DefaultWorkingDirectory)/terraform/backendconfigs/${{ parameters.env }}.hcl"
          terraform plan -var-file="terraform.tfvars"
          terraform apply  -auto-approve -var-file="terraform.tfvars"
        addSpnToEnvironment: true
      displayName: 'Terraform apply'
